apply plugin: 'jacoco'

jacoco {
    toolVersion "0.8.5"

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: "$testTaskName") {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."
            reports {
                html.enabled = true
                xml.enabled = true
            }
            def excludes = [
                    '**/R.class',
                    '**/BR.class',
                    '**/*$*',
                    '**/R$*.class',
                    '**/BR$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    'androidx/databinding/**/*.*',

                    'com/ff/challenge/app/ui/**/*.*',
                    'com/ff/challenge/app/data/cache/FFSharedPreferenceFactory.*',

                    'com/ff/challenge/feature/**/databinding/**',
                    'com/ff/challenge/feature/**/DataBinderMapperImpl.*',
                    'com/ff/challenge/feature/**/FeatureKodeinModule.*',
                    'com/ff/challenge/feature/**/DataBindingInfo.*',
                    'com/ff/challenge/feature/**/DataBinderMapperImpl.InnerBrLookup.*',
                    'com/ff/challenge/feature/**/DataBinderMapperImpl.InnerLayoutIdLookup.*',
                    'com/ff/challenge/feature/**/BR.*',
                    'com/ff/challenge/feature/**/generated/***',
                    'com/ff/challenge/feature/**/ui/**',

                    'com/ff/challenge/library/**/*.*',
                    'com/ff/challenge/app/FFApplication.*',
                    'com/ff/challenge/**/databinding/**',
                    'com/ff/challenge/**/DataBinderMapperImpl.*',
                    'com/ff/challenge/**/FeatureKodeinModule.*',
                    'com/ff/challenge/**/DataBindingInfo.*',
                    'com/ff/challenge/**/DataBinderMapperImpl.InnerBrLookup.*',
                    'com/ff/challenge/**/DataBinderMapperImpl.InnerLayoutIdLookup.*',
                    'com/ff/challenge/**/BR.*',
                    'com/ff/challenge/**/generated/***',
                    'com/ff/challenge/FeatureCurrenciesNavGraphArgs.*',
                    'com/ff/challenge/AppModuleKt.*',

                    'com/ff/challenge/feature/**/data/AuthDataModuleKt.*',
                    'com/ff/challenge/feature/**/domain/AuthDomainModuleKt.*',
                    'com/ff/challenge/feature/**/FeatureCurrenciesNavGraphArgs.*',
                    'com/ff/challenge/feature/**/AuthNavigator.*',
                    'com/ff/challenge/feature/**/CurrenciesNavigator.*',
                    'com/ff/challenge/feature/**/data/local/dao/*.*',
                    'com/ff/challenge/feature/**/data/local/AuthDatabase_Impl.*',
                    'com/ff/challenge/feature/**/data/local/AuthDatabase.*',
                    'com/ff/challenge/feature/**/presentation/AuthPresentationModuleKt.*',
                    'com/ff/challenge/feature/**/ui/AuthUiModuleKt.*',

                    'com/ff/challenge/feature/**/data/CurrenciesDataModuleKt.*',
                    'com/ff/challenge/feature/**/domain/CurrenciesDomainModuleKt.*',
                    'com/ff/challenge/feature/**/presentation/CurrenciesPresentationModuleKt.*',
                    'com/ff/challenge/feature/**/ui/CurrenciesUiModuleKt.*',

                    '**/constant/*',
                    '**/constants/*',
                    '**/adapter/*',
                    '**/Constants.*',
                    '**/di/*'
            ]
            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: excludes)
            def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}", excludes: excludes)
            classDirectories = files([javaClasses, kotlinClasses])
            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/${variantName}/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/${variantName}/kotlin"
            ])
            executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
        }
    }
}
